#+TITLE: Helm-bibtex – A Bibliography Manager for Emacs
#+Options: num:nil

[[http://melpa.org/#/helm-bibtex][http://melpa.org/packages/helm-bibtex-badge.svg]]

* News
- [2015-11-09 Mon] :: Improved insertion of LaTeX cite commands.
- [2015-05-14 Thu] :: Added support for multiple PDF directories.
- [2015-02-23 Mon] :: Added a workaround for a bug in Emacs 24.3.1.  If you
     didn't see any publications, this should fix it.
See [[file:NEWS.org]] for old news.

* Key features:

- Quick access to your bibliography from within Emacs
- Tightly integrated workflows
- Provides instant search results as you type
- Powerful search expressions
- Open the PDFs, URLs, or DOIs associated with an entry
- Insert LaTeX cite commands, Ebib links, or Pandoc citations, BibTeX
  entries, or plain text references at point, attach PDFs to emails
- Attach notes to publications
- Quick access to online bibliographic databases such as Pubmed,
  arXiv, Google Scholar, Library of Congress, etc.

* Description

Helm-bibtex’ main selling points are efficient search in large bibliographies using powerful search expressions and tight integration into your Emacs workflows.  Helm-bibtex can perform the following actions on entries matching the search expression: open the PDF, URL, or DOI, insert a citation, the BibTeX key, the BibTeX entry, or a plain text reference, attach a PDF to an email, take notes, edit the BibTeX entry.  Many aspects of helm-bibtex can be configured to suit personal preferences.

* Example

Below is a screenshot showing a search for entries containing the expression “eye tracking”.

#+CAPTION: A search for publications containing the expression “eye tracking”
[[file:screenshot.png]]

The regular expression ~eye.?tracking~ allows searching for different spellings (“eye tracking”, “eye-tracking”, “eyetracking”).  A looped square symbol (⌘) next to an entry indicates that a PDF is available.  A pen symbol (✎) means that notes were attached.  At the bottom, there are dummy entries that can be used to search in online databases.

* Installation

The easiest way to install the latest version of helm-bibtex is through [[http://melpa.org/#/helm-bibtex][MELPA]].  Alternatively, put the file [[file:helm-bibtex.el]] in a directory included in your load-path and add the following line to your start-up file (typically ~init.el~):

#+BEGIN_SRC emacs-lisp
(autoload 'helm-bibtex "helm-bibtex" "" t)
#+END_SRC

Helm-bibtex depends on the following packages which are all available through MELPA and will be automatically installed if you install helm-bibtex from MELPA:

- [[https://melpa.org/#/helm][Helm]] :: incremental search framework (helm-bibtex is a plug-in for Helm)
- [[https://melpa.org/#/parsebib][Parsebib]] :: a parser for BibTeX files
- [[https://melpa.org/#/dash][Dash]] :: a powerful list-processing library
- [[https://melpa.org/#/s][S]] :: the long lost Emacs string manipulation library
- [[https://melpa.org/#/f][F]] :: a modern API for working with files and directories

Make sure to configure helm (see [[https://github.com/emacs-helm/helm#quick-install-from-git][helm documentation]]).

* Minimal configuration

A minimal configuration involves telling helm-bibtex where your bibliographies can be found:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-bibliography '("/path/to/bibtex-file-1.bib" "/path/to/bibtex-file-2.bib"))
#+END_SRC

* Basic configuration

** PDF files
Specify where PDFs can be found:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-library-path '("/path1/to/pdfs" "/path2/to/pdfs"))
#+END_SRC

Helm-bibtex assumes that the name of a PDF consists of the BibTeX key followed by the suffix ~.pdf~.  Example, if a BibTeX entry has the key ~Darwin1859~, helm-bibtex searches for ~Darvin1859.pdf~ when trying to open the corresponding PDF.

** Notes

Notes for a publication are currently stored in separate files, one file per publication.  The names of these files consist of the BibTeX key plus a user-defined suffix (~.org~ by default).

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-notes-path "/path/to/notes")
(setq helm-bibtex-notes-extension ".org")
#+END_SRC

At this point most people will be ready to go.  Skip to [[#usage][Usage]] below to see how to use helm-bibtex.

* Advanced tweaking

** Fields used for searching

The default fields used for searching are: author, title, year, BibTeX key, entry type (article, inproceedings, …).  To variable ~helm-bibtex-addition-search-fields~ can be used to extend this list.  Example:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-additional-search-fields '(keywords))
#+END_SRC

** Different naming schemes for PDF files

If the PDFs files follow a different naming scheme than BibTeX key + ~.pdf~, the function ~helm-bibtex-find-pdf~ can be modified to accommodate that.

** Symbols used for indicating the availability of notes and PDF files

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-pdf-symbol "⌘")
(setq helm-bibtex-notes-symbol "✎")
#+END_SRC

** Application used for opening PDFs

By default Emacs is used to open PDF files.  This means that either DocView is used, or, if installed, the much superior [[https://github.com/politza/pdf-tools][pdf-tools]] extension which offers features such as incremental search in PDF files and creation and modification of annotations that are compatible with annotations created by Adobe software.

To configure another PDF viewer the customization variable ~helm-bibtex-pdf-open-function~ can be used.  Here is an example configuration for the OS X PDF viewer Skim:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-pdf-open-function
  (lambda (fpath)
    (start-process "skim" "*skim*" "open" (concat "-a /Applications/Skim.app " fpath))))
#+END_SRC

Here is another example for the Linux PDF viewer Evince:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-pdf-open-function
  (lambda (fpath)
    (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince" fpath)))
#+END_SRC

** Browser used for opening URLs and DOIs

By default helm-bibtex uses whatever is Emacs’ default.  However, there are a variety of alternatives (see the documentation of ~helm-bibtex-browser-function~ for a complete list).  Example:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-browser-function 'browser-url-chromium)
#+END_SRC

User-defined functions can be used, too:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-browser-function
  (lambda (url _) (start-process "firefox" "*firefox*" "firefox" url)))
#+END_SRC

** Format of citations

Helm-bibtex creates citations based on the major mode in which the citation is inserted:

- org-mode :: insert link for opening the entry in Ebib
- latex-mode :: insert LaTeX citation command
- markdown-mode :: insert Pandoc citation macro
- other modes :: insert plain BibTeX key

The list of modes can be extended and the citation functions can be changed using the customization variable ~helm-bibtex-format-citation-functions~.  For example, people who don't use Ebib might prefer links to the PDFs instead of Ebib-links in org mode files:

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-format-citation-functions
  '((org-mode      . helm-bibtex-format-citation-org-link-to-PDF)
    (latex-mode    . helm-bibtex-format-citation-cite)
    (markdown-mode . helm-bibtex-format-citation-pandoc-citeproc)
    (default       . helm-bibtex-format-citation-default)))
#+END_SRC

A citation function has to accept a list of keys as input and return a string containing the citations.  See the predefined citation functions for examples.

*** LaTeX citation commands

Helm-bibtex prompts for a LaTeX citation command when inserting citations in LaTeX documents.  The list of commands available for auto-completion can be defined using the variable ~helm-bibtex-cite-commands~.  The default setting includes all cite commands defined in biblatex (except multicite commands and ~\volcite~ et al.).  If no command is entered, a default command is used which can be configured using ~helm-bibtex-default-cite-command~.  The default value for the default command is ~cite~.  By default, helm-bibtex also prompts for pre- and postnotes for the citation.  This can be switched off by setting the variable ~helm-bibtex-cite-prompt-for-optional-arguments~ to ~nil~.

See also the section [[Insertion of LaTeX cite commands]] below.

** Online databases

Online databases can be configured using the customization variable ~helm-bibtex-fallback-options~.  This variable contains an alist where the first element of each entry is the name of the database and the second element is either a URL or a function.  The URL needs to contain a ~%s~ at the position where the current search expression should be inserted.  For an example of a function see ~helm-bibtex-arxiv~.

** Key-bindings

For quick access to the bibliography, bind the search command, ~helm-bibtex~, to a convenient key.  I use the [[http://farm1.static.flickr.com/68/167224406_166a1bf2e5.jpg][menu key]] as the prefix key for all helm commands and bind ~helm-bibtex~ to ~b~.  Helm-bibtex can then be started using ~<menu> b~.  It is also useful to bind ~helm-resume~ to ~<menu>~ in ~helm-command-map~.  With this binding, ~<menu> <menu>~ can be used to reopen the last helm search.

** Predefined searches

For convenience, frequent searches can be captured in commands and bound to key combinations.  Below is example code that defines a search for publications authored by “Jane Doe” and binds the search command to ~C-x p~.

#+BEGIN_SRC elisp
(defun helm-bibtex-my-publications ()
  "Search BibTeX entries authored by “Jane Doe”."
  (interactive)
  (helm :sources '(helm-source-bibtex)
        :full-frame t
        :input "Jane Doe"
        :candidate-number-limit 500))

;; Bind this search function to Ctrl-x p:
(global-set-key (kbd "C-x p") 'helm-bibtex-my-publications)
#+END_SRC

** Changing the default action

Pressing enter on a publication triggers the “default action” which is opening the PDF associated with the publication.  Since the default action is simply the first entry in the list of actions, the default action can be changed by deleting an action and re-inserting it at the top of the list.  Below is an example showing how to make “Insert BibTeX key” the default action:

#+BEGIN_SRC emacs-lisp
(helm-delete-action-from-source "Insert BibTeX key" helm-source-bibtex)
(helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-key helm-source-bibtex 0)
#+END_SRC

The second argument of ~helm-add-action-to-source~ is the function that executes the action.  Here is a list of all actions available in helm-bibtex along with their functions:

- Open PDF file (if present): ~helm-bibtex-open-pdf~
- Open URL or DOI in browser: ~helm-bibtex-open-url-or-doi~
- Insert citation: ~helm-bibtex-insert-citation~
- Insert reference: ~helm-bibtex-insert-reference~
- Insert BibTeX key: ~helm-bibtex-insert-key~
- Insert BibTeX entry: ~helm-bibtex-insert-bibtex~
- Attach PDF to email: ~helm-bibtex-add-PDF-attachment~
- Edit notes: ~helm-bibtex-edit-notes~
- Show entry: ~helm-bibtex-show-entry~

The function ~helm-add-action-to-source~ can also be used to add new actions to helm-bibtex.

* Usage

** Searching publications

The command ~M-x helm-bibtex~ starts a new search in your bibliography.  The default fields for searching are: author, title, year, BibTeX key, and entry type.  Regular expressions can be used.  Example searches:

Everything published by Janet Fodor:

#+BEGIN_EXAMPLE
janet fodor
#+END_EXAMPLE

All PhD theses:

#+BEGIN_EXAMPLE
phdthesis
#+END_EXAMPLE

Lyn Frazier's PhD thesis:

#+BEGIN_EXAMPLE
phdthesis frazier
#+END_EXAMPLE

Publications about eye tracking.  A regular expression is used to match various spellings (“eyetracking”, “eye tracking”, “eye-tracking”):

#+BEGIN_EXAMPLE
eye.?tracking
#+END_EXAMPLE

Conference presentations in 2013:

#+BEGIN_EXAMPLE
2013 inproceedings
#+END_EXAMPLE

Publications from 2010 and 2011:

#+BEGIN_EXAMPLE
\(2010\|2011\)
#+END_EXAMPLE

Articles co-authored by David Caplan and Gloria Waters:

#+BEGIN_EXAMPLE
article waters caplan
#+END_EXAMPLE

Search for articles by David Caplan that are /not/ co-authored by Gloria Waters:

#+BEGIN_EXAMPLE
article caplan !waters
#+END_EXAMPLE

** Search the word under the cursor

A common use case is where a search term is written in a document (say in your LaTeX manuscript) and you want to search for it in your bibliography.  In this situation, just start helm-bibtex and enter ~M-n~.  This inserts the word under the cursor as the search term.  (This is a helm feature and can be used in all helm sources not just helm-bibtex.)  Note that it is also possible to use BibTeX keys for searching.  So if your cursor is on a BibTeX key (e.g., in a LaTeX cite command) you can start helm-bibtex, hit ~M+n~ and see the entry associated with that BibTeX key.  Special case: you want to open the PDF associated with the BibTeX key under the cursor: ~M-x helm-bibtex M-n Enter~.  This is of course shorter if you bind ~helm-bibtex~ to a convenient key (see [[#key-bindings][Key-bindings]]).

** Select multiple entries

Start helm-bibtex, enter the search expression, move the cursor to the matching entry and enter ~C-SPC~ (control + space bar), optionally change your search expression, mark more entries, execute an action for all selected entries at once.

** Actions for selected publications

Select one or more entries (see above) and press ~<return>~ to open the PDF (default action).  Alternatively, press ~TAB~ (tabulator) to see a list of all actions.  There are: 

- Open the PDF file (if present)
- Open the URL or DOI in browser
- Insert citation
- Insert reference
- Insert BibTeX key
- Insert BibTeX entry
- Attach PDF to email
- Edit notes
- Show entry

** A colleague asks for copies of your new papers

Start an email to your colleague and ~M-x helm-bibtex~.  Select your new publications and select “Attach PDF to email.”  Then ~M-x helm-resume~ (the publications are still marked) and select “Insert BibTeX entry.”  Optionally insert more human readable references by ~M-x helm-resume~ and “Insert reference.”  Send email.  Done.  This takes less than 10 seconds.  Of course, this assumes that you’re sending email from Emacs, e.g. via [[http://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]].

** Tagging publications

Helm-bibtex has powerful search capabilities (inherited from Helm) but some common searches cannot be performed simply because the relevant information is typically not represented in BibTeX files.  For example, helm-bibtex doesn’t know whether a conference presentation was a talk or a poster because both are represented as ~inproceedings~.  So if you want to compile a list of your conference talks (e.g., for your CV), that’s not possible – not without some additional work.  One solution to this is to “tag” publications.  Tags are like keywords except that they don’t represent the content of a publications but meta data.  Example:

#+BEGIN_SRC bibtex
@inproceedings{BibtexKey2015,
  author = {Jane Doe and Monika Mustermann},
  title = {This is the title},
  crossref = {XYZ-conference-2015},
  keywords = {keyword1, keyword2},
  pages = {10},
  tags = {poster},
}
#+END_SRC

Since ~tags~ is not a standard BibTeX field, helm-bibtex by default doesn’t consider it when searching.  In order to be able to search for tags we therefore have to tell helm-bibtex that the ~tags~ field is relevant, too: 

#+BEGIN_SRC elsip
(setq helm-bibtex-additional-search-fields '(tags))
#+END_SRC

There are many other ways in which tags can be used.  For example, they can be used to mark articles that you plan to read or important articles or manuscripts in progress, etc.  Be creative.


** Insertion of LaTeX cite commands

The action for inserting a citation command into a LaTeX document prompts for the citation command and, if applicable, for the pre- and postnote arguments.  The prompt for the citation command has its own minibuffer history, which means that previous inputs can be accessed by pressing the ~<up>~ key.  By pressing ~<down>~ it is also possible to access the list of all citation commands defined in biblatex (except for multicite commands and volcite et al. which have different argument structures).  The prompt also supports auto-completion via the ~tab~ key.  If no command is entered, the default command is used.  The default command is defined in the customization variable ~helm-bibtex-default-cite-command~.  By default, helm-bibtex prompts for pre- and postnotes for the citation.  This can be switched off by setting the variable ~helm-bibtex-cite-prompt-for-optional-arguments~ to ~nil~.

